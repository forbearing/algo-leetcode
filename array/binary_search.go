package array

// BinarySearch 在有序数组中查找目标值的索引位置
//
// 1. 算法原理：
//   - 二分查找是一种在有序数组中查找特定元素的算法
//   - 算法通过将待查找区间反复折半，每次与中间元素比较
//   - 若目标值小于中间元素，则在左半部分查找；若大于中间元素，则在右半部分查找
//   - 直到找到目标值或确定目标值不存在为止
//
// 2. 时间复杂度分析：
//   - 最优时间复杂度：O(1)，直接找到目标值
//   - 最坏时间复杂度：O(log n)，需要多次折半
//   - 平均时间复杂度：O(log n)，期望需要 log n 次比较
//
// 3. 空间复杂度分析：
//   - 空间复杂度：O(1)，只需要常量级额外空间
//   - 不需要额外的数据结构，仅使用几个整型变量
//
// 4. 关键实现点：
//   - 使用 left + (right-left)/2 而不是 (left+right)/2 防止整数溢出
//   - 循环条件为 left <= right 以确保能处理边界情况
//   - 更新区间时使用 mid+1 和 mid-1 避免死循环
//
// 5. 适用场景：
//   - 在大规模有序数据集中进行查找
//   - 数据频繁查找但很少修改的场景
//   - 内存空间受限但要求查找效率高的场景
//
// 6. 注意事项：
//   - 输入数组必须是有序的（升序）
//   - 如果数组中存在重复元素，将返回任意一个匹配位置
//   - 对于空数组或未找到目标值，返回 -1
//   - 确保输入数组的长度不会导致索引计算溢出
func BinarySearch(arr []int, target int) int {
	if len(arr) == 0 {
		return -1
	}

	left := 0
	right := len(arr) - 1

	for left <= right {
		mid := left + (right-left)/2

		if arr[mid] == target {
			return mid
		}

		if arr[mid] < target {
			left = mid + 1
		} else {
			right = mid - 1
		}
	}

	return -1
}
